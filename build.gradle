import java.text.SimpleDateFormat
import org.apache.tools.ant.filters.FixCrLfFilter
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import jetbrains.sign.GpgSignSignatoryProvider

buildscript {
  repositories {
    maven { url 'https://packages.jetbrains.team/maven/p/jcs/maven' }
  }
  dependencies {
    classpath 'com.jetbrains:jet-sign:38'
  }
}

plugins {
  id 'java-library'
  id 'maven-publish'
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

apply plugin: 'maven-publish'
//apply plugin: 'signing'

def pathToNativeInJar = 'resources/com/pty4j/native'
def projectVersion = new File(rootProject.projectDir, 'VERSION').text

version = projectVersion
group = 'org.jetbrains.pty4j'
archivesBaseName = 'pty4j'

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
  }
  test {
    java {
      srcDirs = ['test']
    }
    resources {
      srcDir 'test/resources'
    }
  }
}

test {
  testLogging {
    events("passed", "skipped", "failed")
    showStackTraces = true
    exceptionFormat = TestExceptionFormat.FULL
    showStandardStreams = true
  }
  jvmArgs '--enable-preview'
}

compileJava {
  sourceCompatibility = '21'
  targetCompatibility = '21'
  options.debugOptions.debugLevel = 'lines,vars,source'
  options.compilerArgs << '--enable-preview'
}

compileTestJava {
  sourceCompatibility = '21'
  targetCompatibility = '21'
  options.compilerArgs << '--enable-preview'
}

repositories {
  maven {
    url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies"
  }
  mavenCentral()
}

jar {
  from('os') {
    include '**/*'
    into pathToNativeInJar
  }
  manifest {
    attributes(
        'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
        'Created-By': "Gradle ${gradle.gradleVersion}",
        'Build-Jdk': "${System.properties['java.runtime.version']}",
        'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
  }
}

tasks.register('sourcesZip', Jar) {
  dependsOn classes
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
  filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.newInstance("lf"))
}

tasks.register('javadocJar', Jar) {
  from javadoc
  archiveClassifier = 'javadoc'
}

javadoc.options {
    addBooleanOption('-enable-preview', true)
    addStringOption('-release', '21')
}

artifacts {
  archives sourcesZip
}

tasks.register('testJar', Test) {
  dependsOn jar, testClasses
  description = 'Runs tests on built jar instead of build/classes/java/main/**/*.class files'
  group = 'verification'

  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = project.files("$buildDir/libs/" + jar.archiveFileName.get(),
                            sourceSets.test.output.classesDirs,
                            sourceSets.test.output.resourcesDir,
                            configurations.testRuntimeClasspath)
  systemProperty 'pty4j.preferred.native.folder', 'false'
  shouldRunAfter test
}

check.dependsOn test, testJar

dependencies {
  implementation 'org.jetbrains:annotations:24.0.1'
  implementation "org.slf4j:slf4j-api:2.0.9"
  testImplementation 'com.google.guava:guava:32.1.3-jre'
  testImplementation 'junit:junit:4.13.2'
  testRuntimeOnly "org.slf4j:slf4j-simple:2.0.9"
}

ext.publishingUser = System.getenv('PUBLISHING_USER')
ext.publishingPassword = System.getenv('PUBLISHING_PASSWORD')

nexusPublishing {
  repositories {
    sonatype {
      username = rootProject.ext.publishingUser
      password = rootProject.ext.publishingPassword
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      group rootProject.group
      artifactId archivesBaseName
      artifact sourcesZip
      artifact javadocJar
      version rootProject.ext.publishingUser != null ? projectVersion : projectVersion + '-SNAPSHOT'
      pom {
        name = 'pty4j'
        description = 'Pseudo terminal(PTY) implementation in Java'
        url = 'https://github.com/JetBrains/pty4j'
        licenses {
          license {
            name = 'Eclipse Public License 1.0'
            url = 'https://opensource.org/licenses/eclipse-1.0.php'
          }
        }
        developers {
          developer {
            id = 'sergey.simonchik'
            name = 'Sergey Simonchik'
            organization = 'JetBrains'
            organizationUrl = 'https://www.jetbrains.com'
            email = 'sergey.simonchik@jetbrains.com'
          }
          developer {
            id = 'dmitry.trofimov'
            name = 'Dmitry Trofimov'
            organization = 'JetBrains'
            organizationUrl = 'https://www.jetbrains.com'
            email = 'dmitry.trofimov@jetbrains.com'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:JetBrains/pty4j.git'
          developerConnection = 'scm:git:ssh:github.com/JetBrains/pty4j.git'
          url = 'https://github.com/JetBrains/pty4j'
        }
      }
    }
  }
}

/*
signing {
  sign publishing.publications
  signatories = new GpgSignSignatoryProvider()
}
*/
