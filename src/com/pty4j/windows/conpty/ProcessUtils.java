package com.pty4j.windows.conpty;

import static com.pty4j.Native.err;
import static com.pty4j.Native.ok;

import java.io.IOException;
import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.stream.Collectors;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import com.pty4j.Native;
import com.pty4j.windows.Kernel32;
import com.pty4j.windows.Kernel32.PROCESS_INFORMATION;
import com.pty4j.windows.Kernel32.STARTUPINFOA;
import com.pty4j.windows.Kernel32._STARTUPINFOEXA;
import com.pty4j.windows.winpty.WinPtyProcess;

final class ProcessUtils {

  public static MemorySegment startProcess(@NotNull Arena mem, 
										  @NotNull PseudoConsole pseudoConsole,
                                          @NotNull String[] command,
                                          @Nullable String workingDirectory,
                                          @NotNull Map<String, String> environment) throws IOException {
	MemorySegment startupInfo = ProcessUtils.prepareStartupInformation(mem, pseudoConsole);
    return ProcessUtils.start(mem, startupInfo, command, workingDirectory, environment);
  }

  private static MemorySegment prepareStartupInformation(@NotNull Arena mem, @NotNull PseudoConsole pseudoConsole) throws IOException {
	  
    MemorySegment startupInfo = mem.allocate(_STARTUPINFOEXA.layout());
    MemorySegment sinfo = _STARTUPINFOEXA.StartupInfo(startupInfo);
    
    STARTUPINFOA.cb(sinfo, (int)startupInfo.byteSize());
    STARTUPINFOA.lpReserved2(sinfo, MemorySegment.NULL); // should be NULL according to the spec, but auto-generated by JNA
    STARTUPINFOA.hStdOutput(sinfo, MemorySegment.NULL);
    STARTUPINFOA.hStdError(sinfo, MemorySegment.NULL);
    STARTUPINFOA.hStdInput(sinfo, MemorySegment.NULL);
    // according to https://github.com/microsoft/terminal/issues/11276#issuecomment-923210023
    STARTUPINFOA.dwFlags(sinfo, Kernel32.STARTF_USESTDHANDLES);
    
    MemorySegment bytesRequired = mem.allocate(ValueLayout.JAVA_INT);
    
    if (ok(Kernel32.InitializeProcThreadAttributeList(
    	MemorySegment.NULL,
        1,
        0,
        bytesRequired))) {
      throw new IllegalStateException("InitializeProcThreadAttributeList was unexpected to succeed");
    }

    MemorySegment threadAttributeList = mem.allocate(bytesRequired.get(ValueLayout.JAVA_INT,0));
    // TODO needed?
//    threadAttributeList.clear();

    _STARTUPINFOEXA.lpAttributeList(startupInfo, threadAttributeList);

    if (err(Kernel32.InitializeProcThreadAttributeList(
        threadAttributeList,
        1,
        0,
        bytesRequired))) {
      throw new LastErrorExceptionEx("InitializeProcThreadAttributeList");
    }

    if (err(Kernel32.UpdateProcThreadAttribute(
        threadAttributeList,
        0,
        Kernel32.PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE,
        pseudoConsole.getHandle(),
        Native.C_POINTER.byteSize(),
        MemorySegment.NULL,
        MemorySegment.NULL))) {
      throw new LastErrorExceptionEx("UpdateProcThreadAttribute");
    }

    return startupInfo;
  }

  private static MemorySegment start(@NotNull Arena mem, 
                                     @NotNull MemorySegment startupInfo,
                                     @NotNull String[] command,
                                     @Nullable String workingDirectory,
                                     @NotNull Map<String, String> environment) throws IOException {
    MemorySegment processInfo = mem.allocate(PROCESS_INFORMATION.layout());
    String commandLine = WinPtyProcess.joinCmdArgs(command);
    if (err(Kernel32.CreateProcessW(
        MemorySegment.NULL,
        Native.toWideString(commandLine, mem),
        MemorySegment.NULL,
        MemorySegment.NULL,
        Native.FALSE,
        Kernel32.EXTENDED_STARTUPINFO_PRESENT | Kernel32.CREATE_UNICODE_ENVIRONMENT,
        toEnvironmentBlock(mem, environment),
        Native.toWideString(workingDirectory, mem),
        startupInfo,
        processInfo))) {
      throw new LastErrorExceptionEx("CreateProcessW");
    }
    return processInfo;
  }

  private static @NotNull MemorySegment toEnvironmentBlock(@NotNull Arena mem,  @NotNull Map<String, String> environment) {
    String str = environment.entrySet().stream()
            .map(entry -> entry.getKey() + "=" + entry.getValue() + "\0")
            .collect(Collectors.joining()) + "\0";
    byte[] bytes = str.getBytes(StandardCharsets.UTF_16LE);
    MemorySegment result = mem.allocate(bytes.length);
    result.asByteBuffer().put(0, bytes, 0, bytes.length);
    return result;
  }

  public static void closeHandles(MemorySegment processInformation) throws IOException {
    if (err(Kernel32.CloseHandle(PROCESS_INFORMATION.hThread(processInformation)))) {
      throw new LastErrorExceptionEx("CloseHandle hThread");
    }
    if (err(Kernel32.CloseHandle(PROCESS_INFORMATION.hProcess(processInformation)))) {
      throw new LastErrorExceptionEx("CloseHandle hProcess");
    }
  }
}
